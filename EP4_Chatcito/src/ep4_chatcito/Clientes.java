/*
3.1. Autor(es): 
Arines Landa Paloma Elena ALPO210074
Castro Jiménez Wilbert CJWO210081
Diaz Real Maximiliano DRMO210031

3.2. Materia: POO
3.3. Evidencia: EP4. App utilizando sockets
3.4. Fecha de entrega: 07/08/2023
3.5. Nombre de Archivo con extensión: EP4_Sockets_Arines_Castro_Diaz.zip
3.6. Descripción de la problemática:
Se desea realizar una aplicación en la cual mediante el uso de sockets en java
se puede hacer la semulacion de un servidor y varios clientes, de forma tal que se representa 
de manera local el envio de mensaje de un cleinte 'x' a un cliente 'y' , cuya informacion pasa por medio
del un intermediario, que en este caso es el servidor el cuál redirige la información al 
cliente del destino, asi mismo el servidor puede mandar mensaje a todos los
clientes que esten conectados al servidor.
para poder realizar la comunicación entre los clientes se debe implementar una GUI
la cual permita al usuario poder leer y enviar mensaje.

 */
package ep4_chatcito;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author WILBERT
 */
public class Clientes extends javax.swing.JFrame implements Runnable{
    ArrayList<Controles> lista2=new ArrayList<Controles>(); 
    private static int puertoF;
    private static String nombre;
    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    
    public int getPuerto() {
        return puertoF;
    }

    public void setPuerto(int puerto) {
        this.puertoF = puerto;
    }
    /**
     * Creates new form Clientes
     */
    public Clientes() {
        
        try {
            String nombre2 = JOptionPane.showInputDialog("nombre de usuario: ");
            System.out.println("print 1");
            Socket misocket = new Socket("192.168.100.254",1024);
            System.out.println("print 1");
            ServerSocket auxiliar = new ServerSocket(0);
            int puertoDisponible=auxiliar.getLocalPort();
            auxiliar.close();
            
            Paquete1 datos = new Paquete1(); 
            nombre=nombre2;
            datos.setNick2(nombre);
            datos.setPuerto(puertoDisponible);
            puertoF=puertoDisponible;
            System.out.println(puertoF);
            datos.setMensaje(" Online");
            
            ObjectOutputStream salida = new ObjectOutputStream(misocket.getOutputStream());
            salida.writeObject(datos);
            misocket.close();
            
            
            initComponents();
            nick.setText(nombre);
            Thread mihilo = new Thread(this);
            mihilo.start();
        } catch (IOException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        historial = new javax.swing.JTextArea();
        enviar = new javax.swing.JButton();
        mensaje = new javax.swing.JTextField();
        ipdestino = new javax.swing.JComboBox<>();
        nick = new javax.swing.JLabel();
        num = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setLocationByPlatform(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        historial.setColumns(20);
        historial.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        historial.setRows(5);
        historial.setCaretColor(new java.awt.Color(150, 191, 218));
        historial.setSelectedTextColor(new java.awt.Color(150, 191, 218));
        scroll.setViewportView(historial);

        jPanel1.add(scroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 390, 168));

        enviar.setText("Enviar");
        enviar.setToolTipText("");
        enviar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarActionPerformed(evt);
            }
        });
        jPanel1.add(enviar, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 330, 81, 38));

        mensaje.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        mensaje.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        mensaje.setCaretColor(new java.awt.Color(150, 191, 218));
        mensaje.setSelectedTextColor(new java.awt.Color(150, 191, 218));
        mensaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mensajeActionPerformed(evt);
            }
        });
        jPanel1.add(mensaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 390, 70));

        ipdestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipdestinoActionPerformed(evt);
            }
        });
        jPanel1.add(ipdestino, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 185, 121, -1));

        nick.setBackground(new java.awt.Color(204, 204, 255));
        nick.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jPanel1.add(nick, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 110, 72, 17));

        num.setBackground(new java.awt.Color(204, 255, 255));
        num.setFont(new java.awt.Font("Haettenschweiler", 1, 24)); // NOI18N
        jPanel1.add(num, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 280, 29, 25));

        jLabel1.setFont(new java.awt.Font("Roboto", 3, 14)); // NOI18N
        jLabel1.setText("Escribe un mensaje");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, -1, -1));

        jLabel2.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel2.setText("Usuario");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 90, -1, -1));

        jLabel3.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel3.setText("Enviar a:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 170, -1, -1));

        jLabel4.setFont(new java.awt.Font("Roboto", 3, 14)); // NOI18N
        jLabel4.setText("Historial del Chat");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        jLabel5.setFont(new java.awt.Font("Roboto", 3, 24)); // NOI18N
        jLabel5.setText("Aplicación modo Cliente");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, -1, -1));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 590, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 620, 410));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarActionPerformed
        // InetAddress direccion;

        /*
        direccion = InetAddress.getLocalHost(); //para obtener la ip de nuestro dispositivo
        String ip = direccion.getHostAddress();*/
        //  String ipdes = ipserver.getText();

        try {                //nuestra ip del servidor y el puerto que va a estar abierto
            Socket miSocket =new Socket("192.168.100.254",1024);
            Paquete1 datos = new Paquete1();
            datos.setNick2(nick.getText());
            datos.setDestinatario(ipdestino.getSelectedItem().toString());
            String aux;
            aux=ipdestino.getSelectedItem().toString();
            for(int i=0;i<lista2.size();i++){
                if(aux.equalsIgnoreCase(lista2.get(i).getNombrecontrol())){
                    datos.setIp(lista2.get(i).getIpcontrol());
                }

            }
            
            historial.append("\n-"+mensaje.getText());
            datos.setMensaje(mensaje.getText());

            ObjectOutputStream salida = new ObjectOutputStream(miSocket.getOutputStream());
            salida.writeObject(datos);
            mensaje.setText(null);
            miSocket.close();
            //el flujo se conducira por el socket previamente creado
            /* DataOutputStream salida = new DataOutputStream(miSocket.getOutputStream());
            salida.writeUTF(mensaje.getText());  //escribe en el flujo el texto del mensaje

            salida.close();*/
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
            // Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_enviarActionPerformed

    private void ipdestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipdestinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ipdestinoActionPerformed

    private void mensajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mensajeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mensajeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Clientes().setVisible(true);
            }
        });
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton enviar;
    private javax.swing.JTextArea historial;
    private javax.swing.JComboBox<String> ipdestino;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField mensaje;
    private javax.swing.JLabel nick;
    private javax.swing.JLabel num;
    private javax.swing.JScrollPane scroll;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        try {
            System.out.println(puertoF);
            ServerSocket servidor_cliente = new ServerSocket(puertoF);
            
            
            ArrayList<String> ipsMenu = new ArrayList<String>();
            Socket cliente;
            Paquete1 paquete_recibido;
            while(true){
            cliente = servidor_cliente.accept();
            ObjectInputStream entrada = new ObjectInputStream(cliente.getInputStream());
            paquete_recibido= (Paquete1) entrada.readObject();
            System.out.println(" "+paquete_recibido.getMensaje());
            if(!paquete_recibido.getMensaje().equalsIgnoreCase(" Online")){
           /*     String aux3;
            for(int i=0;i<lista2.size();i++){
               if(){
               
               }
            }*/
            historial.append("\n\t\t"+paquete_recibido.getNick2()+ ": "+ paquete_recibido.getMensaje());
            } else{
                 
                //historial.append(paquete_recibido.getDirIps().toString());
                Controles hola = new Controles();
                ipsMenu=paquete_recibido.getDirIps();
                String nombre=paquete_recibido.getNick2();
                lista2=paquete_recibido.getControl();
                System.out.println("conecta nuevo");

                String conected = String.valueOf(lista2.size());
                num.setText(conected);
             
                ipdestino.removeAllItems();//borra el arrayList desactualizado
//                ipdestino.addItem("Server");
                for(int i=0;i<lista2.size();i++){
                ipdestino.addItem(lista2.get(i).getNombrecontrol());
                }
            } 
            }
        } catch (IOException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    } 
        
    
}




